name: Toolify Data Collection

on:
  schedule:
    # 每月2号凌晨2点执行 (UTC时间)
    - cron: '0 2 2 * *'
  workflow_dispatch:  # 支持手动触发
    inputs:
      target_count:
        description: '采集目标数量'
        required: false
        default: '3000'
        type: string
      quick_test:
        description: '快速测试模式 (使用模拟数据)'
        required: false
        default: false
        type: boolean

jobs:
  collect:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # 增加到90分钟，支持大量数据上传

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          echo "📦 开始安装Python依赖包..."
          echo "🔄 升级pip..."
          python -m pip install --upgrade pip --timeout 60

          echo "📋 安装依赖包（带超时和进度显示）..."
          pip install --timeout 300 --verbose -r requirements.txt

          echo "✅ Python依赖安装完成"
          echo "📊 已安装的包列表:"
          pip list | grep -E "(selenium|requests|webdriver-manager|python-dotenv)"

      - name: Install Chrome and ChromeDriver
        timeout-minutes: 10
        run: |
          echo "🌐 开始安装Chrome浏览器..."
          sudo apt-get update -q
          sudo apt-get install -y google-chrome-stable unzip wget

          echo "✅ Chrome安装完成"
          google-chrome --version

          # 获取Chrome版本
          CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
          echo "Chrome version: $CHROME_VERSION"
          echo "Chrome major version: $MAJOR_VERSION"

          # 尝试安装ChromeDriver（多种方法）
          # 方法1: 使用apt安装（最简单）
          if sudo apt-get install -y chromium-chromedriver; then
            echo "✅ 使用apt安装ChromeDriver成功"
            sudo ln -sf /usr/bin/chromedriver /usr/local/bin/chromedriver 2>/dev/null || true
          else
            echo "⚠️ apt安装失败，尝试手动下载..."

            # 方法2: 手动下载稳定版本
            CHROMEDRIVER_VERSION="120.0.6099.109"
            echo "Using ChromeDriver version: $CHROMEDRIVER_VERSION"

            DOWNLOAD_URL="https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
            echo "Download URL: $DOWNLOAD_URL"

            if wget -O /tmp/chromedriver.zip "$DOWNLOAD_URL"; then
              sudo unzip /tmp/chromedriver.zip -d /tmp/
              sudo mv /tmp/chromedriver /usr/local/bin/chromedriver
              sudo chmod +x /usr/local/bin/chromedriver
            else
              echo "❌ ChromeDriver下载失败，尝试使用webdriver-manager"
            fi
          fi

          # 验证ChromeDriver是否可用
          if [ -f "/usr/local/bin/chromedriver" ]; then
            echo "✅ ChromeDriver安装成功:"
            ls -la /usr/local/bin/chromedriver
            /usr/local/bin/chromedriver --version
          elif [ -f "/usr/bin/chromedriver" ]; then
            echo "✅ 使用系统ChromeDriver:"
            ls -la /usr/bin/chromedriver
            /usr/bin/chromedriver --version
          else
            echo "⚠️ ChromeDriver安装可能有问题，将依赖webdriver-manager"
          fi

      - name: Verify script files exist
        run: |
          echo "🔍 检查脚本文件..."
          ls -la scripts/
          echo "📋 production-collector.py 内容前10行:"
          head -10 scripts/production-collector.py
          echo "🔧 设置脚本执行权限..."
          chmod +x scripts/production-collector.py scripts/quick-test-collector.py

      - name: Run data collection
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          INPUT_TARGET_COUNT: ${{ github.event.inputs.target_count }}
        run: |
          echo "🔧 环境变量检查:"
          echo "   TARGET_COUNT输入: ${{ github.event.inputs.target_count }}"
          echo "   INPUT_TARGET_COUNT: $INPUT_TARGET_COUNT"
          echo "   QUICK_TEST模式: ${{ github.event.inputs.quick_test }}"

          if [ "${{ github.event.inputs.quick_test }}" = "true" ]; then
            echo "🧪 运行快速测试模式..."
            echo "📋 测试脚本前5行:"
            head -5 scripts/quick-test-collector.py
            python -u scripts/quick-test-collector.py
          else
            echo "🔄 运行完整数据采集..."
            echo "📋 脚本前5行:"
            head -5 scripts/production-collector.py
            echo "🚀 开始执行脚本..."
            python -u scripts/production-collector.py
          fi

      - name: Upload backup on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: collection-backup-${{ github.run_number }}
          path: ./toolify-backup-*.json
          retention-days: 30
          if-no-files-found: ignore

      - name: Notify on success
        if: success()
        run: |
          echo "✅ 数据采集成功完成于 $(date)"
          echo "📊 查看最新数据: https://your-toolify-app.vercel.app"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ 数据采集失败于 $(date)"
          echo "📋 请检查日志和备份文件"